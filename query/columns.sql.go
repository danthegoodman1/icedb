// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: columns.sql

package query

import (
	"context"
)

const getColumns = `-- name: GetColumns :many
SELECT namespace, col, type, created_at
FROM columns
WHERE namespace = $1
`

func (q *Queries) GetColumns(ctx context.Context, namespace string) ([]Column, error) {
	rows, err := q.db.Query(ctx, getColumns, namespace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Column
	for rows.Next() {
		var i Column
		if err := rows.Scan(
			&i.Namespace,
			&i.Col,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertColumns = `-- name: InsertColumns :exec
INSERT INTO columns (namespace, col, type)
SELECT $1,
       UNNEST($2::TEXT[]) as col,
       UNNEST($3::TEXT[]) AS type
ON CONFLICT DO NOTHING
`

type InsertColumnsParams struct {
	Namespace string
	ColNames  []string
	ColTypes  []string
}

func (q *Queries) InsertColumns(ctx context.Context, arg InsertColumnsParams) error {
	_, err := q.db.Exec(ctx, insertColumns, arg.Namespace, arg.ColNames, arg.ColTypes)
	return err
}

const listNamespaces = `-- name: ListNamespaces :many
SELECT DISTINCT namespace
FROM columns
`

// Yes I know...
func (q *Queries) ListNamespaces(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listNamespaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var namespace string
		if err := rows.Scan(&namespace); err != nil {
			return nil, err
		}
		items = append(items, namespace)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tryInsertColumn = `-- name: TryInsertColumn :exec
INSERT INTO columns (namespace, col, type)
VALUES ($1, $2, $3)
ON CONFLICT DO NOTHING
`

type TryInsertColumnParams struct {
	Namespace string
	Col       string
	Type      string
}

func (q *Queries) TryInsertColumn(ctx context.Context, arg TryInsertColumnParams) error {
	_, err := q.db.Exec(ctx, tryInsertColumn, arg.Namespace, arg.Col, arg.Type)
	return err
}
